const config = require('./Config/config.json');
const Discord = require('discord.js');
const robot = new Discord.Client();
const Channels = require('./Config/channels.json');
const regexYoutubeLink = /^((http|https)\:\/\/)?(www\.youtube\.com|youtu\.?be)\/((watch\?v=)?([a-zA-Z0-9\w].*))(&.*)*$/; //? Old Regex "/(http|https):\/\/(\w:{0,1}\w*)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%!\-\/]))?/;"
const regexDeleteabchannel = /[\?|&](start_radio=|index=)(.*)[0-9]\&.*|&ab_channel=.*/ // /(&.*)*$/;
const regexSpotifyLink = /^(?:spotify:|https:\/\/[a-z]+\.spotify\.com\/(track\/|user\/(.*)\/playlist\/))(.*)$/;
const playerU = require('play-dl');
const args_url = [];
const emojis = robot.emojis.cache.get("813422124463161405");
const gm = require('gm');
let request = require('request');
const imgbbUploader = require("imgbb-uploader");
const randomColor = require('randomcolor');
const dispatcher = robot.voice.createBroadcast();

//? —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏

function clearMessage(robot, mess, args){
  try{
    if(mess.member.roles.cache.get(config.roledeveloper)){
      const arggs = mess.content.split(' ').slice(1); // –í—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞ –∏–º–µ–Ω–µ–º –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
      const amount = arggs.join(' '); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã
      if (!amount) return mess.channel.send('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏, —Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å!'); // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–¥–∞–Ω –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
      if (isNaN(amount)) return mess.channel.send('–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ!'); // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
      if (amount > 100) return mess.channel.send('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å 100 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑'); // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 100
      if (amount < 1) return mess.channel.send('–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ —á–µ–º 1'); // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∏—Å–ª–æ–º –º–µ–Ω—å—à–µ 1
        
      async function delete_messages() { // –û–±—ä—è–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        await mess.channel.messages.fetch({
          limit: amount
        }).then(messages => {
          mess.channel.bulkDelete(messages, true)
          mess.channel.send(`–£–¥–∞–ª–µ–Ω–æ ${amount} —Å–æ–æ–±—â–µ–Ω–∏–π!`)
        }).catch(console.error);
      }
      delete_messages(); // –í—ã–∑–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    }else{
      mess.channel.send(`–£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã! ${emojis}`)
    }
  }
  catch(error){
    console.error(error.message);
    mess.channel.send("–£ –º–µ–Ω—è –æ—à–∏–±–∫–∞!");
  }
 
}

function ping(robot, mess, args) {
  try{
    if(mess.member.roles.cache.get(config.roledeveloper)){
      const check = robot.emojis.cache.get('813421996184567808')
      mess.channel.send(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ! ${check}`)
    }else{
      mess.channel.send("–£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
    }
  }catch(error){
    console.error(error.message);
    mess.channel.send("–£ –º–µ–Ω—è –æ—à–∏–±–∫–∞!")
  }
  
}

function info_channels(robot, mess, args) {
  try {
    if(mess.member.roles.cache.get(config.roledeveloper)){
      const guild = robot.guilds.cache.get("809499536702570566");
      const arr = Object.values(Channels.channels);
      var result = [];
      const category = robot.channels.cache.find(ct => ct.name.startsWith("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ö–∞–Ω–∞–ª–∞"));
      
      for (let i = 0; i < arr.length; i++) {
      result.push(arr[i].Name);
      }
  
      function channels() {
      if (eval("for (let i = 0; i < result.length; i++) {robot.channels.cache.find(chnl => chnl.name.startsWith(result[i]))}")) {
        mess.channel.send("‚õî [–û—à–∏–±–∫–∞]: –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç!");
      }
      else{
        for(const key in Channels.channels){
        mess.guild.channels.create(`${Channels.channels[key].Name} ${eval(Channels.channels[key].count_users)}`,{
          type: "voice",
          permissionOverwrites: [
          {
            id: mess.guild.roles.everyone,
            allow: [
            'VIEW_CHANNEL',
            'READ_MESSAGE_HISTORY'
            ],
            deny: [
            'CONNECT',
            'MANAGE_CHANNELS',
            'SPEAK'
            ]
          },
          {
            id: mess.guild.roles.cache.get(config.userRole),
            allow: ['VIEW_CHANNEL', 'READ_MESSAGE_HISTORY'],
            deny: ['CONNECT','MANAGE_CHANNELS','SPEAK']
          },
          {
            id: mess.guild.roles.cache.get(config.role_Rinka),
            allow: ['VIEW_CHANNEL','MANAGE_CHANNELS','READ_MESSAGE_HISTORY'],
          }
          ],
          parent: robot.channels.cache.find(ct => ct.name.startsWith("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ö–∞–Ω–∞–ª–∞")).id,
        })
        .catch(console.error);
        }
        mess.channel.send("‚ö† [–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ]: –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π 10 –º–∏–Ω—É—Ç!");
      }
      }
  
      if (category) {
      channels();
      }else{
      mess.guild.channels.create("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ö–∞–Ω–∞–ª–∞",{
        type: "category",
        permissionOverwrites: [
        {
          id: mess.guild.roles.everyone,
          allow: ['READ_MESSAGE_HISTORY'],
          deny: ['CONNECT', 'MANAGE_CHANNELS','SPEAK','VIEW_CHANNEL']
        }
        ],
        position: 0,
      })
      .catch(console.error)
      .then(setTimeout(channels, 390));
      }
    }else{
        mess.channel.send(`–£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã! ${emojis}`)
      }
  } catch (error) {
    console.error(error.message);
  }
}

//? Music catrgory

async function play(robot, mess, args) {
  args_url.length == 1 ? args_url.splice(0, 1, args[1]) : args_url.push(args[1])
  const voiceChannel = mess.member.voice.channel;
  const guild = robot.guilds.cache.get("809499536702570566");
  const emojSpotify = guild.emojis.cache.find(em => em.name.startsWith('Spotify'));
  const emojYouTube = guild.emojis.cache.find(em => em.name.startsWith('Youtube'));
  const emojServers = guild.emojis.cache.find(em => em.name.startsWith('Servers')); 
  if(!emojServers) return guild.emojis.create('./img/Servers.png', 'Servers');
  if(!args[1].length) return mess.channel.send(`‚õî [–û—à–∏–±–∫–∞]: –í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –º—É–∑—ã–∫–∏ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ ${emojYouTube}YouTube/${emojSpotify}Spotify –∏–ª–∏ –ù–∞–∑–≤–∞–Ω–∏—è –ø–µ—Å–Ω–∏!`);
  try {
    const validURLYoutube = (str) =>{
      if(!regexYoutubeLink.test(str)){
        return false;
      }else{
        return true;
      }
    }
    //! Plays the link YouTube
    if (validURLYoutube(args[1])) {
      if(!emojYouTube) return guild.emojis.create('./img/YouTube_Emoji.png', 'Youtube')
      const videoFinder = async (query) => {
        const newQuery = query.replace(regexDeleteabchannel, '');
        const videoResult = await playerU.search(newQuery, {fuzzy: true}); 
        return videoResult[0]
      }

      const playlistFinder = async (query) => {
        const newQuery = query.replace(regexDeleteabchannel, '');
        const videoResult2 = await playerU.playlist_info(newQuery, { incomplete: true,  });
        const PlayList = [];
        for (let i = 0; i < videoResult2.videos.length; i++) {
          PlayList.push({
            name: videoResult2.videos[i].title,
            link: videoResult2.videos[i].url,
            time: videoResult2.videos[i].durationRaw,
            livebool: videoResult2.videos[i].durationRaw == '0:00' ? true : false
          });
        }
        return PlayList;
      }
      const video = await videoFinder(args[1]);
      let count = 0;
      if(video == null){
        mess.channel.send('‚ö† [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
      }else{
        var stream = (await playerU.stream(video.url, {quality: 2})).stream;
        //! Stream - —ç—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∫–∞–∫ dispatcher, —Å –ø–æ–º–æ—â—å—é –Ω–µ—ë –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å pause –∏ skip
        const connection = await voiceChannel.join();
        function sendMessage() {
          gm(request(video.thumbnails[0].url))
            .draw(['image Over 5,10,120,50 "img/youtube.png"']) // youtube img
            .resizeExact('640', '360')
            .autoOrient()
            .noProfile()
            .write("img/musicImgYoutube.png", function(err){
              if (err){
                return console.log(err.message);
              }
              imgbbUploader("23f5d3136302ce349c121d669e92b56e", "img/musicImgYoutube.png")
                .then(response => {
                  const block = new Discord.MessageEmbed()
                  .setColor(randomColor({luminosity: 'light', hue: 'random'}))
                  .setDescription(`
                  :musical_note: –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: **[${video.title}](${video.url})**,
                  ${emojServers} –ò–≥—Ä–∞–µ—Ç —Å —Å–µ—Ä–≤–∏—Å–∞: ${emojYouTube},
                  :man_detective: –î–æ–±–∞–≤–∏–ª: **${mess.author}**,
                  :alarm_clock: –í—Ä–µ–º—è –ø–µ—Å–Ω–∏: ${video.live == true ? ":infinity:" : video.durationRaw}
                  `)
                  .setAuthor(`–ê–≤—Ç–æ—Ä –≤–∏–¥–µ–æ: ${video.channel.name}`, video.channel.icons[0].url, video.channel.url)
                  
                  .setFooter(`–ú—É–∑—ã–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª–µ: ${connection.channel.name}`)
                  .setThumbnail(response.display_url)
                  
                  mess.channel.send(block);
                  connection.play(stream, {quality: 'highestaudio', highWaterMark: 1 << 25})
                })
            })
        }
        return args_url, sendMessage()
      }
    }
    else{
      //! Plays the text Music
      const connection = await voiceChannel.join();
      const videoFinder = async (query) => {
        const videoResult = await playerU.search(query.replace(args[0], ''), {limit: 1, fuzzy: true});
        return videoResult[0];
      }
      const video = await videoFinder(args.join(' '));
      if (video == null) {
        mess.channel.send("‚ö† [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
      }else{
        const stream = (await playerU.stream(video.url, {quality: 2})).stream;
        connection.play(stream, {seek: 0, volume: 1, quality: 'highestaudio', highWaterMark: 1 << 25});
        // .on('finish', () => {});

        const block = new Discord.MessageEmbed()
          .setColor(randomColor({luminosity: 'light', hue: 'random'}))
          .setDescription(`
          :musical_note: –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: **[${video.title}](${video.url})**,
          :man_detective: –î–æ–±–∞–≤–∏–ª: **${mess.author}**,
          :alarm_clock: –í—Ä–µ–º—è –ø–µ—Å–Ω–∏: ${video.live == true ? ":infinity:" : video.durationRaw}
          `)
          .setAuthor(`–ê–≤—Ç–æ—Ä –≤–∏–¥–µ–æ: ${video.channel.name}`, video.channel.icons[0].url, video.channel.url)
          .setFooter(`–ú—É–∑—ã–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª–µ: ${connection.channel.name}`)
          .setThumbnail(video.thumbnails[0].url);

          mess.channel.send(block);
      }
    }

    
    const validURLSpotify = (str) =>{
      if (!regexSpotifyLink.test(str)) {
        return false;
      } else {
        return true;
      }
    }

    //! Plays the link Spotify
    if (validURLSpotify(args[1])) {
      if (!voiceChannel) return mess.channel.send("‚õî [–û—à–∏–±–∫–∞]: –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª–µ –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–æ—Ç!");
      if(!emojSpotify) return guild.emojis.create('./img/Spotify_Emoji.png', 'Spotify')
      if(playerU.is_expired()){
        await playerU.refreshToken()
      }
      
      let sp_data = await playerU.spotify(args[1]);
      let searched = await playerU.search(`${sp_data.artists[0].name} - ${sp_data.name}`, {limit: 1});
      if (searched == null) return mess.channel.send('‚ö† [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
      const player = (await playerU.stream(searched[0].url, {quality: 2})).stream
      const connection = await voiceChannel.join();
      
      function sendMessage() {
        gm(request(sp_data.thumbnail.url))
          .draw(['image Over 0,15,195,74 "img/spotify.png"']) // spotify img
          .resizeExact('406', '406')
          .write("img/musicImgSpotify.png", function(err){
            if (err){
              return console.log(err.message);
            }
            imgbbUploader("23f5d3136302ce349c121d669e92b56e", "img/musicImgSpotify.png")
              .then((response) => {
                const block = new Discord.MessageEmbed()
                .setColor(randomColor({luminosity: 'light', hue: 'random'}))
                .setDescription(`
                :musical_note: –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: **[${searched[0].title}](${sp_data.url})**,
                ${emojServers} –ò–≥—Ä–∞–µ—Ç —Å —Å–µ—Ä–≤–∏—Å–∞: ${emojSpotify},
                :man_detective: –î–æ–±–∞–≤–∏–ª: **${mess.author}**,
                :alarm_clock: –í—Ä–µ–º—è –ø–µ—Å–Ω–∏: ${searched[0].durationRaw}
                `)
                .setAuthor(`–ê–≤—Ç–æ—Ä –º—É–∑—ã–∫–∏: ${searched[0].channel.name}`, searched[0].channel.icons[0].url, searched[0].channel.url)
                .setFooter(`–ú—É–∑—ã–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª–µ: ${connection.channel.name}`)
                .setThumbnail(response.url);
                
                mess.channel.send(block);
                connection.play(player, {seek: 0, volume: 1, quality: 'highestaudio', highWaterMark: 1 << 25});
                
              });
          });
      }
      return sendMessage()
    }

  } catch (error) {
    if (!voiceChannel) return mess.channel.send("‚õî [–û—à–∏–±–∫–∞]: –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ª—é–±–æ–º –≥–æ–ª–æ—Å–æ–≤ –∫–∞–Ω–∞–ª–µ!");
    const permissions = voiceChannel.permissionsFor(mess.client.user);
    if (!permissions.has('CONNECT')) return mess.channel.send("‚ö† [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]: –£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!");
    if (!permissions.has('SPEAK')) return mess.channel.send("‚ö† [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]: –£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤–æ –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ –¥–∞–Ω–Ω–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!");
    console.error('–ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏: ' + error);
    mess.channel.send("‚õî [–û—à–∏–±–∫–∞]: –ù–µ –≤–æ–∑–º–æ–∂–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—É—é –º—É–∑—ã–∫—É, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –±–∏—Ç—É—é —Å—Å—ã–ª–∫—É—é.");
  }
}

async function pause(robot, mess, args) {
  try {
    (await playerU.stream(args_url[0], {quality: 2})).pause
  } catch (error) {
    const voiceChannel = mess.member.voice.channel;
    if (!voiceChannel) return mess.channel.send("‚õî [–û—à–∏–±–∫–∞]: –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ª—é–±–æ–º –≥–æ–ª–æ—Å–æ–≤ –∫–∞–Ω–∞–ª–µ!");
    console.error(error.message);
  }
}

async function resume(robot, mess, args) {
  try {
    const voiceChannel = mess.member.voice.channel;
    (await playerU.stream()).resume;
  } catch (error) {
    const voiceChannel = mess.member.voice.channel;
    if (!voiceChannel) return mess.channel.send("‚õî [–û—à–∏–±–∫–∞]: –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ª—é–±–æ–º –≥–æ–ª–æ—Å–æ–≤ –∫–∞–Ω–∞–ª–µ!");
    console.error(error.message);
  }
}

async function skip(robot, mess, args) {
  try {
    const voiceChannel = mess.member.voice.channel;
    if (!voiceChannel) return mess.channel.send("‚õî [–û—à–∏–±–∫–∞]: –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª–µ –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–æ—Ç!");
  } catch (error) {
    console.error(error.message);
  }
}

var comms_list = [
  //? Settings category
  {
    name: "ping",
    out: ping
  },
  {
    name: "clear",
    out: clearMessage,
  },
  {
    name: "setupStats",
    out: info_channels
  },

  //? Music category
  {
    name: "play",
    out: play
  }//,
  // {
  //   name: "pause",
  //   out: pause
  // },
  // {
  //   name: "resume",
  //   out: resume
  // },
  // {
  //   name: "skip",
  //   out: skip
  // }
];

module.exports.comms = comms_list;